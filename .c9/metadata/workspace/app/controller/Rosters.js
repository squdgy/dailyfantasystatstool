{"changed":true,"filter":false,"title":"Rosters.js","tooltip":"/app/controller/Rosters.js","value":"/*global Ext: false DFST: false html2canvas: false*/\nExt.define('DFST.controller.Rosters', {\n    extend: 'Ext.app.Controller',\n\n    stores: ['SiteDetails', 'Roster'],\n    models: ['SiteDetails', 'RosterPosition', 'RosterSlot'],\n    views:  ['statset.Grid', 'rosterbuilder.Panel'],\n    \n    refs: [\n        {ref: 'siteInfo', selector: '#siteinfo'},\n        {ref: 'siteScreenShotArea', selector: '#ssarea'},\n        {ref: 'siteGrid', selector: 'rosterbuilder grid'},\n        {ref: 'screenShotButton', selector: 'rosterbuilder button#screenshot'},\n        {ref: 'deleteButtons', selector: 'rosterbuilder actioncolumn[id=delete]'},\n        {ref: 'watermark', selector: 'rosterbuilder #watermark'}\n    ],\n    \n    /* internal variables */\n    _dfsGameId: null,\n    _date: null,\n    \n    init: function() {\n        this.listen({\n            component: {\n                'statsetgrid': {\n                    selectionchange: this.highlightPossibleSlots\n                },\n                'statsetgrid > tableview': {\n                    itemdblclick: this.addToRoster\n                },\n                'rosterbuilder': {\n                    removefromroster: this.removeFromRoster\n                },\n                'rosterbuilder button#screenshot': {\n                    click: this.screenShot\n                },\n                'rosterbuilder button#clear': {\n                    click: this.clearRoster\n                }\n            },\n            controller: {\n                '*': {\n                    appDateChanged: this.changeDate,\n                    appScoringChanged: this.changeScoring\n                }\n            },\n            store: {\n                '#Roster' : {\n                    beforesync : this.updateSummary\n                }  \n            }\n        });\n    },\n    \n    onLaunch: function() {\n        // clear rosters saved before yesterday\n        var store = this.getRosterStore();\n        store.load();\n        var delTime = new Date().getTime() - (1000 * 60 * 60 * 24 * 2);\n        var nrecs = store.count();\n        var didRemove = false;\n        for (var i = nrecs; i > 0; i--) {\n            var rec = store.getAt(i-1);\n            if (rec.get('dt').getTime() < delTime) {\n                didRemove = true;\n                store.removeAt(i-1);\n            }\n        }\n        if (didRemove) { store.sync(); }\n    },\n    \n    changeDate: function(newDate) {\n        this._date = new Date(newDate.getFullYear(), newDate.getMonth(), \n            newDate.getDate());\n        this.changeRosterDefinition();\n    },\n\n    changeScoring: function(dfsGameId) {\n        this._dfsGameId = dfsGameId;\n        this.changeRosterDefinition();\n    },\n    \n    changeRosterDefinition: function() {\n        var siteRec = this.getSiteDetailsStore().findRecord('dfsGameId', \n            this._dfsGameId);\n        var date = this._date;\n        if (date === null || siteRec === null) return;\n        \n        var me = this;\n        var positions = siteRec.getAssociatedData().positions;\n        var cap = siteRec.get('cap');\n\n        // load roster from cache if there is one,\n        var npos = positions.length;\n        var rStore = this.getRosterStore();\n\n        // only show players from the dfs game and date we care about\n        rStore.filterBy(function(rec, id) {\n            return rec.get('dfsGameId') === me._dfsGameId &&\n                rec.get('dt').getTime() === me._date.getTime();\n        });\n        \n        // if store is empty, nothing was in cache\n        var numSlots = 0;\n        if (rStore.count() === 0) {\n            for (var i=0; i<npos; i++) {\n                var pos = positions[i];\n                // fill rosterStore with empty spots\n                for (var j=0; j<pos.count; j++) {\n                    rStore.add(Ext.create('DFST.model.RosterSlot', {\n                        dfsGameId: me._dfsGameId, \n                        dt: me._date,\n                        rpos: pos.name, \n                        rpid: pos.id\n                    }));\n                    numSlots++;\n                }\n            }\n        }\n        // if > 0, but less than npos, something went wrong\n        if (numSlots > 0 && numSlots < rStore.count()) {\n            if (console.log) { console.log('problem deserializing roster'); }\n        }\n\n        var fmtcap = Ext.util.Format.currency(cap, '$', -1);\n        var perplayer = Ext.util.Format.currency(cap/numSlots, '$', -1);\n        var siteInfo = me.getSiteInfo();\n        if (siteInfo) {\n            siteInfo.update({\n                cap: fmtcap,\n                remaining: fmtcap,\n                perplayer: perplayer\n            });\n        }\n        var sportString = DFST.AppSettings.sport.toUpperCase();\n        var dateString = me._date.toDateString();\n        var siteGrid = me.getSiteGrid();\n        if (siteGrid) {\n            siteGrid.setTitle(siteRec.get('name') + ' - ' + fmtcap + ' - ' + sportString + ' - ' + dateString);\n        }\n        me.salaryCap = cap; // save for later use\n        \n        this.updateSummary();\n    },\n    \n    screenShot: function() {\n        var watermark = this.getWatermark();\n        var rgrid = Ext.getCmp('rostergrid');\n        var selModel = rgrid.view.selModel;\n        var selections = selModel.getSelection();\n        var deleteButtons = this.getDeleteButtons();\n        \n        var ssArea = this.getSiteScreenShotArea();\n        // clear some things for screenshot\n        rgrid.showCopyright = true;\n        deleteButtons.hide();\n        selModel.deselectAll();\n        watermark.show();\n\n        html2canvas(ssArea.getEl().dom, {\n            onrendered: function(canvas) {\n                //restore stuff cleared for screenshot\n                rgrid.showCopyright = false;\n                watermark.hide();\n                selModel.select(selections, false, true);\n                deleteButtons.show();\n                \n                var dataURL = canvas.toDataURL();\n                \n                Ext.create('Ext.window.Window', {\n                    title: 'Your Lineup as an Image',\n                    height: canvas.height + 100,\n                    width: canvas.width + 50,\n                    layout: {\n                        type: 'vbox',\n                        align: 'center'\n                    },\n                    defaults: {\n                        padding: 5  \n                    },\n                    items: [{\n                        xtype: 'panel',\n                        html: '<img title=\"lineup\" src=\"' + dataURL +'\">'\n                    }, {\n                        xtype: 'button',\n                        text: 'Download',\n                        listeners: {\n                            click: function(){\n                                var link = document.createElement(\"a\");\n                                link.setAttribute(\"href\", dataURL);\n                                link.setAttribute(\"download\", \"lineup.png\");\n                                link.click();\n                            }\n                        }\n                    }/*, {\n                        xtype: 'button',\n                        text: 'Upload',\n                        listeners: {\n                            click: function(){\n                                var b64src = dataURL.replace(/.*,/, '');\n                                Ext.Ajax.request({\n                                   url: 'https://lineupbragproxy.azurewebsites.net/',\n                                   method: 'post',\n                                   params: { base64Image : b64src }\n                                });                                \n                            }\n                        }\n                    }*/]\n                }).show();                \n            }\n        });    \n    },\n\n    /* When a roster changes update the summary information  */\n    updateSummary: function( options ) {\n        var store = this.getRosterStore();\n        var numSlots = store.count();\n        var usedcap = 0;\n        var slotsrem = 0;\n        for (var i=0; i < numSlots; i++) {\n            var sal = store.getAt(i).get('salary');\n            if (sal > 0) {\n                usedcap += sal;\n            } else {\n                slotsrem++;\n            }\n        }\n        var cap = this.salaryCap;\n        var rem = cap - usedcap;\n        var fmtcap = Ext.util.Format.currency(cap, '$', -1);\n        var fmtrem = Ext.util.Format.currency(rem, '$', -1);\n        var pp = slotsrem === 0 ? 0 : (cap - usedcap)/slotsrem;\n        var fmtpp = Ext.util.Format.currency(pp, '$', -1);\n     \n        var highlightTpl = new Ext.Template('<span style=\"color:red;font-weight:bold;\">{0}</span>');\n        var fmthtml = rem >= 0 ? fmtrem : highlightTpl.apply([fmtrem]);\n        var pphtml = rem >= 0 ? fmtpp : highlightTpl.apply([fmtpp]);\n        var siteInfo = this.getSiteInfo();\n        if (siteInfo) {\n            siteInfo.update({\n                cap: fmtcap,\n                remaining: fmthtml,\n                perplayer: pphtml\n            });\n        }\n    },\n   \n    /* Add player to first eligible, open roster spot, if any */\n    addToRoster: function(view, playerRec, item, index, e, eOpts ) {\n        var store = Ext.getCmp('rostergrid').store,\n            nrecs = store.count(),\n            i, rec;\n\n        // no salary?, return\n        if (playerRec.get('sal') === 0) {\n            return;\n        }\n        // if the player is already in the roster; if so, return\n        var pid = playerRec.get('id');\n        if (store.findRecord('pid', pid)) { \n            return;\n        } else {\n            for (i=0; i<nrecs; i++) {\n                rec = store.getAt(i);\n                if (rec.get('pid') > 0) { //slot filled\n                    continue;   \n                }\n                if (Ext.Array.contains(playerRec.get('rpel'), rec.get('rpid'))) {\n                    //found empty slot\n                    var pname = playerRec.get('fname') + ' ' + playerRec.get('lname');\n                    if (DFST.AppSettings.sport === 'mlb') {\n                        var prop = playerRec.get('spos') === 'P' ? 'throws' : 'bats';\n                        var propVal = playerRec.get(prop);\n                        var val = 'S';\n                        if (propVal === 1) {\n                            val = 'L';\n                        } else if (propVal === 2) {\n                            val = 'R';\n                        }\n                        pname += ' (' + val + ')';\n                    }\n                    rec.set('name', pname);\n                    rec.set('team', playerRec.get('team'));\n                    rec.set('pid', pid);\n                    rec.set('fppg', playerRec.get('afp'));\n                    rec.set('salary', playerRec.get('sal'));\n                    store.sync();\n                    return;\n                }\n            }\n        }\n    },\n    \n    removeFromRoster: function(store, rec){\n        rec.set('name', null);\n        rec.set('team', null);\n        rec.set('pid', null);\n        rec.set('fppg', null);\n        rec.set('salary', null);\n        store.sync();\n    },\n\n    clearRoster: function(){\n        var store = this.getRosterStore();\n        var nrecs = store.count();\n        for (var i=0; i<nrecs; i++) {\n            var rec = store.getAt(i);\n            rec.set('name', null);\n            rec.set('team', null);\n            rec.set('pid', null);\n            rec.set('fppg', null);\n            rec.set('salary', null);\n        }\n        store.sync();\n    },\n    \n    /* selects (highlights) rows in roster grid where a selected player may be placed  */\n    highlightPossibleSlots: function(grid, recs) {\n        if (!recs || recs.length === 0) return;\n        \n        var possibleSlots = [],\n            playerRec = recs[0],\n            rgrid = Ext.getCmp('rostergrid'),\n            i, rec;\n        \n        if (rgrid == null) return;\n        var store = rgrid.store, nrecs = store.count();\n        \n        // check if the player is already in the roster\n        // if so, select only that spot\n        var pid = playerRec.get('id');\n        var existingRec = store.findRecord('pid', pid);\n        if (existingRec) { \n            possibleSlots.push(existingRec);\n        } else if (playerRec.get('sal') === 0) { // no salary\n            // do nothing\n        } else {\n            for (i=0; i<nrecs; i++) {\n                rec = store.getAt(i);\n                if (Ext.Array.contains(playerRec.get('rpel'), rec.get('rpid'))) {\n                    possibleSlots.push(rec);\n                }\n            }\n        }\n\n        //rgrid.view.selModel.select(possibleSlots, false, true);\n        //rgrid.view.refresh();\n    }\n});","undoManager":{"mark":98,"position":100,"stack":[[{"start":{"row":287,"column":20},"end":{"row":287,"column":21},"action":"insert","lines":["v"],"id":157}],[{"start":{"row":287,"column":21},"end":{"row":287,"column":22},"action":"insert","lines":["i"],"id":158}],[{"start":{"row":287,"column":22},"end":{"row":287,"column":23},"action":"insert","lines":["e"],"id":159}],[{"start":{"row":287,"column":23},"end":{"row":287,"column":24},"action":"insert","lines":["w"],"id":160}],[{"start":{"row":287,"column":24},"end":{"row":287,"column":25},"action":"insert","lines":["."],"id":161}],[{"start":{"row":287,"column":25},"end":{"row":287,"column":26},"action":"insert","lines":["s"],"id":162}],[{"start":{"row":287,"column":26},"end":{"row":287,"column":27},"action":"insert","lines":["e"],"id":163}],[{"start":{"row":287,"column":27},"end":{"row":287,"column":28},"action":"insert","lines":["l"],"id":164}],[{"start":{"row":287,"column":28},"end":{"row":287,"column":29},"action":"insert","lines":["M"],"id":165}],[{"start":{"row":287,"column":25},"end":{"row":287,"column":29},"action":"remove","lines":["selM"],"id":166},{"start":{"row":287,"column":25},"end":{"row":287,"column":33},"action":"insert","lines":["selModel"]}],[{"start":{"row":287,"column":33},"end":{"row":287,"column":34},"action":"insert","lines":["."],"id":167}],[{"start":{"row":287,"column":34},"end":{"row":287,"column":35},"action":"insert","lines":["d"],"id":168}],[{"start":{"row":287,"column":35},"end":{"row":287,"column":36},"action":"insert","lines":["e"],"id":169}],[{"start":{"row":287,"column":36},"end":{"row":287,"column":37},"action":"insert","lines":["s"],"id":170}],[{"start":{"row":287,"column":34},"end":{"row":287,"column":37},"action":"remove","lines":["des"],"id":171},{"start":{"row":287,"column":34},"end":{"row":287,"column":45},"action":"insert","lines":["deselectAll"]}],[{"start":{"row":287,"column":45},"end":{"row":287,"column":47},"action":"insert","lines":["()"],"id":172}],[{"start":{"row":287,"column":47},"end":{"row":287,"column":48},"action":"insert","lines":[";"],"id":173}],[{"start":{"row":287,"column":46},"end":{"row":287,"column":47},"action":"insert","lines":["t"],"id":174}],[{"start":{"row":287,"column":47},"end":{"row":287,"column":48},"action":"insert","lines":["r"],"id":175}],[{"start":{"row":287,"column":48},"end":{"row":287,"column":49},"action":"insert","lines":["u"],"id":176}],[{"start":{"row":287,"column":49},"end":{"row":287,"column":50},"action":"insert","lines":["e"],"id":177}],[{"start":{"row":287,"column":46},"end":{"row":287,"column":50},"action":"remove","lines":["true"],"id":178},{"start":{"row":287,"column":46},"end":{"row":287,"column":47},"action":"insert","lines":["f"]}],[{"start":{"row":287,"column":47},"end":{"row":287,"column":48},"action":"insert","lines":["a"],"id":179}],[{"start":{"row":287,"column":48},"end":{"row":287,"column":49},"action":"insert","lines":["l"],"id":180}],[{"start":{"row":287,"column":49},"end":{"row":287,"column":50},"action":"insert","lines":["s"],"id":181}],[{"start":{"row":287,"column":50},"end":{"row":287,"column":51},"action":"insert","lines":["e"],"id":182}],[{"start":{"row":287,"column":46},"end":{"row":287,"column":51},"action":"remove","lines":["false"],"id":183},{"start":{"row":287,"column":46},"end":{"row":287,"column":47},"action":"insert","lines":["t"]}],[{"start":{"row":287,"column":47},"end":{"row":287,"column":48},"action":"insert","lines":["r"],"id":184}],[{"start":{"row":287,"column":48},"end":{"row":287,"column":49},"action":"insert","lines":["u"],"id":185}],[{"start":{"row":287,"column":49},"end":{"row":287,"column":50},"action":"insert","lines":["e"],"id":186}],[{"start":{"row":245,"column":8},"end":{"row":245,"column":9},"action":"insert","lines":["/"],"id":187}],[{"start":{"row":245,"column":9},"end":{"row":245,"column":10},"action":"insert","lines":["/"],"id":188}],[{"start":{"row":245,"column":9},"end":{"row":245,"column":10},"action":"remove","lines":["/"],"id":189}],[{"start":{"row":245,"column":8},"end":{"row":245,"column":9},"action":"remove","lines":["/"],"id":190}],[{"start":{"row":244,"column":9},"end":{"row":245,"column":0},"action":"insert","lines":["",""],"id":191},{"start":{"row":245,"column":0},"end":{"row":245,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":245,"column":8},"end":{"row":245,"column":53},"action":"insert","lines":["Ext.getCmp(\"summaryrowId\").doUpdateSummary();"],"id":192}],[{"start":{"row":246,"column":0},"end":{"row":246,"column":1},"action":"insert","lines":["/"],"id":194}],[{"start":{"row":246,"column":1},"end":{"row":246,"column":2},"action":"insert","lines":["/"],"id":195}],[{"start":{"row":245,"column":31},"end":{"row":245,"column":32},"action":"remove","lines":["d"],"id":196}],[{"start":{"row":245,"column":30},"end":{"row":245,"column":31},"action":"remove","lines":["I"],"id":197}],[{"start":{"row":245,"column":29},"end":{"row":245,"column":30},"action":"remove","lines":["w"],"id":198}],[{"start":{"row":245,"column":28},"end":{"row":245,"column":29},"action":"remove","lines":["o"],"id":199}],[{"start":{"row":245,"column":27},"end":{"row":245,"column":28},"action":"remove","lines":["r"],"id":200}],[{"start":{"row":288,"column":0},"end":{"row":289,"column":0},"action":"remove","lines":["                    view.selModel.deselectAll(true);",""],"id":201}],[{"start":{"row":194,"column":21},"end":{"row":194,"column":23},"action":"remove","lines":["/*"],"id":202,"ignore":true},{"start":{"row":207,"column":21},"end":{"row":207,"column":23},"action":"remove","lines":["*/"]},{"start":{"row":245,"column":0},"end":{"row":247,"column":0},"action":"remove","lines":["        Ext.getCmp(\"summary\").doUpdateSummary();","//        Ext.getCmp('rostergrid').view.refresh();",""]},{"start":{"row":252,"column":0},"end":{"row":253,"column":0},"action":"insert","lines":["",""]},{"start":{"row":326,"column":0},"end":{"row":327,"column":0},"action":"remove","lines":["        rgrid.view.selModel.deselectAll(true);",""]}],[{"start":{"row":194,"column":21},"end":{"row":194,"column":22},"action":"insert","lines":["/"],"id":203}],[{"start":{"row":194,"column":22},"end":{"row":194,"column":23},"action":"insert","lines":["*"],"id":204}],[{"start":{"row":207,"column":21},"end":{"row":207,"column":22},"action":"insert","lines":["*"],"id":205}],[{"start":{"row":207,"column":22},"end":{"row":207,"column":23},"action":"insert","lines":["/"],"id":206}],[{"start":{"row":345,"column":63},"end":{"row":346,"column":0},"action":"insert","lines":["",""],"id":207},{"start":{"row":346,"column":0},"end":{"row":346,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":346,"column":4},"end":{"row":346,"column":8},"action":"remove","lines":["    "],"id":208}],[{"start":{"row":346,"column":4},"end":{"row":346,"column":8},"action":"insert","lines":["    "],"id":209}],[{"start":{"row":346,"column":8},"end":{"row":346,"column":9},"action":"insert","lines":["r"],"id":210}],[{"start":{"row":346,"column":9},"end":{"row":346,"column":10},"action":"insert","lines":["g"],"id":211}],[{"start":{"row":346,"column":10},"end":{"row":346,"column":11},"action":"insert","lines":["r"],"id":212}],[{"start":{"row":346,"column":11},"end":{"row":346,"column":12},"action":"insert","lines":["i"],"id":213}],[{"start":{"row":346,"column":12},"end":{"row":346,"column":13},"action":"insert","lines":["d"],"id":214}],[{"start":{"row":346,"column":13},"end":{"row":346,"column":14},"action":"insert","lines":["."],"id":215}],[{"start":{"row":346,"column":14},"end":{"row":346,"column":15},"action":"insert","lines":["v"],"id":216}],[{"start":{"row":346,"column":15},"end":{"row":346,"column":16},"action":"insert","lines":["i"],"id":217}],[{"start":{"row":346,"column":16},"end":{"row":346,"column":17},"action":"insert","lines":["e"],"id":218}],[{"start":{"row":346,"column":17},"end":{"row":346,"column":18},"action":"insert","lines":["w"],"id":219}],[{"start":{"row":346,"column":18},"end":{"row":346,"column":19},"action":"insert","lines":["."],"id":220}],[{"start":{"row":346,"column":19},"end":{"row":346,"column":20},"action":"insert","lines":["r"],"id":221}],[{"start":{"row":346,"column":20},"end":{"row":346,"column":21},"action":"insert","lines":["e"],"id":222}],[{"start":{"row":346,"column":21},"end":{"row":346,"column":22},"action":"insert","lines":["f"],"id":223}],[{"start":{"row":346,"column":22},"end":{"row":346,"column":23},"action":"insert","lines":["r"],"id":224}],[{"start":{"row":346,"column":23},"end":{"row":346,"column":24},"action":"insert","lines":["e"],"id":225}],[{"start":{"row":346,"column":24},"end":{"row":346,"column":25},"action":"insert","lines":["s"],"id":226}],[{"start":{"row":346,"column":25},"end":{"row":346,"column":26},"action":"insert","lines":["h"],"id":227}],[{"start":{"row":346,"column":25},"end":{"row":346,"column":26},"action":"remove","lines":["h"],"id":228}],[{"start":{"row":346,"column":25},"end":{"row":346,"column":26},"action":"insert","lines":["h"],"id":229}],[{"start":{"row":346,"column":26},"end":{"row":346,"column":28},"action":"insert","lines":["()"],"id":230}],[{"start":{"row":346,"column":27},"end":{"row":346,"column":28},"action":"insert","lines":[";"],"id":231}],[{"start":{"row":346,"column":27},"end":{"row":346,"column":28},"action":"remove","lines":[";"],"id":232}],[{"start":{"row":346,"column":28},"end":{"row":346,"column":29},"action":"insert","lines":[";"],"id":233}],[{"start":{"row":214,"column":40},"end":{"row":215,"column":0},"action":"insert","lines":["",""],"id":234},{"start":{"row":215,"column":0},"end":{"row":215,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":215,"column":8},"end":{"row":215,"column":9},"action":"insert","lines":["r"],"id":235}],[{"start":{"row":215,"column":9},"end":{"row":215,"column":10},"action":"insert","lines":["e"],"id":236}],[{"start":{"row":215,"column":10},"end":{"row":215,"column":11},"action":"insert","lines":["t"],"id":237}],[{"start":{"row":215,"column":11},"end":{"row":215,"column":12},"action":"insert","lines":["u"],"id":238}],[{"start":{"row":215,"column":12},"end":{"row":215,"column":13},"action":"insert","lines":["r"],"id":239}],[{"start":{"row":215,"column":13},"end":{"row":215,"column":14},"action":"insert","lines":["n"],"id":240}],[{"start":{"row":215,"column":14},"end":{"row":215,"column":15},"action":"insert","lines":[";"],"id":241}],[{"start":{"row":215,"column":0},"end":{"row":216,"column":0},"action":"remove","lines":["        return;",""],"id":242}],[{"start":{"row":345,"column":8},"end":{"row":345,"column":9},"action":"insert","lines":["/"],"id":243}],[{"start":{"row":345,"column":9},"end":{"row":345,"column":10},"action":"insert","lines":["/"],"id":244}],[{"start":{"row":346,"column":8},"end":{"row":346,"column":9},"action":"insert","lines":["/"],"id":245}],[{"start":{"row":346,"column":9},"end":{"row":346,"column":10},"action":"insert","lines":["/"],"id":246}],[{"start":{"row":344,"column":0},"end":{"row":345,"column":0},"action":"insert","lines":["",""],"id":247}],[{"start":{"row":345,"column":0},"end":{"row":345,"column":1},"action":"insert","lines":["d"],"id":248}],[{"start":{"row":345,"column":1},"end":{"row":345,"column":2},"action":"insert","lines":["e"],"id":249}],[{"start":{"row":345,"column":2},"end":{"row":345,"column":3},"action":"insert","lines":["b"],"id":250}],[{"start":{"row":345,"column":3},"end":{"row":345,"column":4},"action":"insert","lines":["u"],"id":251}],[{"start":{"row":345,"column":4},"end":{"row":345,"column":5},"action":"insert","lines":["g"],"id":252}],[{"start":{"row":345,"column":5},"end":{"row":345,"column":6},"action":"insert","lines":["g"],"id":253}],[{"start":{"row":345,"column":6},"end":{"row":345,"column":7},"action":"insert","lines":["e"],"id":254}],[{"start":{"row":345,"column":7},"end":{"row":345,"column":8},"action":"insert","lines":["r"],"id":255}],[{"start":{"row":345,"column":8},"end":{"row":345,"column":9},"action":"insert","lines":[";"],"id":256}],[{"start":{"row":345,"column":0},"end":{"row":345,"column":9},"action":"remove","lines":["debugger;"],"id":257}],[{"start":{"row":344,"column":0},"end":{"row":345,"column":0},"action":"remove","lines":["",""],"id":258}]]},"ace":{"folds":[],"scrolltop":4690,"scrollleft":0,"selection":{"start":{"row":344,"column":0},"end":{"row":344,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":14,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1433845562558}